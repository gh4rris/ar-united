// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: groups.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createGroup = `-- name: CreateGroup :one
INSERT INTO groups(id, name, created_at, updated_at, admin_id, description)
VALUES (
    gen_random_uuid(),
    $1,
    NOW(),
    NOW(),
    $2,
    $3
)
RETURNING id, name, created_at, updated_at, admin_id, description
`

type CreateGroupParams struct {
	Name        string
	AdminID     uuid.UUID
	Description sql.NullString
}

func (q *Queries) CreateGroup(ctx context.Context, arg CreateGroupParams) (Group, error) {
	row := q.db.QueryRowContext(ctx, createGroup, arg.Name, arg.AdminID, arg.Description)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AdminID,
		&i.Description,
	)
	return i, err
}

const createMember = `-- name: CreateMember :exec
INSERT INTO users_groups(user_id, group_id)
VALUES (
    $1,
    $2
)
`

type CreateMemberParams struct {
	UserID  uuid.UUID
	GroupID uuid.UUID
}

func (q *Queries) CreateMember(ctx context.Context, arg CreateMemberParams) error {
	_, err := q.db.ExecContext(ctx, createMember, arg.UserID, arg.GroupID)
	return err
}

const groupMembers = `-- name: GroupMembers :many
SELECT u.id, u.first_name, u.last_name, u.dob, u.created_at, u.updated_at, u.email, u.hased_password
FROM users_groups AS ug
INNER JOIN users AS u
ON ug.user_id = u.id
WHERE ug.group_id = $1
ORDER BY u.first_name
`

func (q *Queries) GroupMembers(ctx context.Context, groupID uuid.UUID) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, groupMembers, groupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Dob,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Email,
			&i.HasedPassword,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const groupsByUser = `-- name: GroupsByUser :many
SELECT g.id, g.name, g.created_at, g.updated_at, g.admin_id, g.description
FROM users_groups AS ug
INNER JOIN groups AS g
ON ug.group_id = g.id
WHERE ug.user_id = $1
ORDER BY g.name
`

func (q *Queries) GroupsByUser(ctx context.Context, userID uuid.UUID) ([]Group, error) {
	rows, err := q.db.QueryContext(ctx, groupsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Group
	for rows.Next() {
		var i Group
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.AdminID,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
