// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: groups.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const checkSlugGroup = `-- name: CheckSlugGroup :one
SELECT COUNT(slug) AS slug_count
FROM groups
WHERE slug = $1
`

func (q *Queries) CheckSlugGroup(ctx context.Context, slug string) (int64, error) {
	row := q.db.QueryRowContext(ctx, checkSlugGroup, slug)
	var slug_count int64
	err := row.Scan(&slug_count)
	return slug_count, err
}

const createGroup = `-- name: CreateGroup :one
INSERT INTO groups(id, name, created_at, updated_at, admin_id, description, slug)
VALUES (
    gen_random_uuid(),
    $1,
    NOW(),
    NOW(),
    $2,
    $3,
    $4
)
RETURNING id, name, created_at, updated_at, admin_id, description, slug
`

type CreateGroupParams struct {
	Name        string
	AdminID     uuid.UUID
	Description sql.NullString
	Slug        string
}

func (q *Queries) CreateGroup(ctx context.Context, arg CreateGroupParams) (Group, error) {
	row := q.db.QueryRowContext(ctx, createGroup,
		arg.Name,
		arg.AdminID,
		arg.Description,
		arg.Slug,
	)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AdminID,
		&i.Description,
		&i.Slug,
	)
	return i, err
}

const createMember = `-- name: CreateMember :exec
INSERT INTO users_groups(user_id, group_id)
VALUES (
    $1,
    $2
)
`

type CreateMemberParams struct {
	UserID  uuid.UUID
	GroupID uuid.UUID
}

func (q *Queries) CreateMember(ctx context.Context, arg CreateMemberParams) error {
	_, err := q.db.ExecContext(ctx, createMember, arg.UserID, arg.GroupID)
	return err
}

const getGroupByID = `-- name: GetGroupByID :one
SELECT id, name, created_at, updated_at, admin_id, description, slug
FROM groups
WHERE id = $1
`

func (q *Queries) GetGroupByID(ctx context.Context, id uuid.UUID) (Group, error) {
	row := q.db.QueryRowContext(ctx, getGroupByID, id)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AdminID,
		&i.Description,
		&i.Slug,
	)
	return i, err
}

const getGroupBySlug = `-- name: GetGroupBySlug :one
SELECT id, name, created_at, updated_at, admin_id, description, slug
FROM groups
WHERE slug = $1
`

func (q *Queries) GetGroupBySlug(ctx context.Context, slug string) (Group, error) {
	row := q.db.QueryRowContext(ctx, getGroupBySlug, slug)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AdminID,
		&i.Description,
		&i.Slug,
	)
	return i, err
}

const groupEvents = `-- name: GroupEvents :many
SELECT e.id, e.name, e.location, e.date, e.created_at, e.updated_at, e.description, e.group_id, e.slug
FROM groups AS g
INNER JOIN events AS e
ON g.id = e.group_id
WHERE g.id = $1
`

func (q *Queries) GroupEvents(ctx context.Context, id uuid.UUID) ([]Event, error) {
	rows, err := q.db.QueryContext(ctx, groupEvents, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Location,
			&i.Date,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Description,
			&i.GroupID,
			&i.Slug,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const groupMembers = `-- name: GroupMembers :many
SELECT u.id, u.first_name, u.last_name, u.dob, u.created_at, u.updated_at, u.email, u.bio, u.slug, u.profile_pic_url, u.hashed_password, u.is_guest
FROM users_groups AS ug
INNER JOIN users AS u
ON ug.user_id = u.id
WHERE ug.group_id = $1
ORDER BY u.first_name
`

func (q *Queries) GroupMembers(ctx context.Context, groupID uuid.UUID) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, groupMembers, groupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Dob,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Email,
			&i.Bio,
			&i.Slug,
			&i.ProfilePicUrl,
			&i.HashedPassword,
			&i.IsGuest,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const groupsByAdmin = `-- name: GroupsByAdmin :many
SELECT id, name, created_at, updated_at, admin_id, description, slug
FROM groups
WHERE admin_id = $1
`

func (q *Queries) GroupsByAdmin(ctx context.Context, adminID uuid.UUID) ([]Group, error) {
	rows, err := q.db.QueryContext(ctx, groupsByAdmin, adminID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Group
	for rows.Next() {
		var i Group
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.AdminID,
			&i.Description,
			&i.Slug,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const groupsByUser = `-- name: GroupsByUser :many
SELECT g.id, g.name, g.created_at, g.updated_at, g.admin_id, g.description, g.slug
FROM users_groups AS ug
INNER JOIN groups AS g
ON ug.group_id = g.id
WHERE ug.user_id = $1
ORDER BY g.name
`

func (q *Queries) GroupsByUser(ctx context.Context, userID uuid.UUID) ([]Group, error) {
	rows, err := q.db.QueryContext(ctx, groupsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Group
	for rows.Next() {
		var i Group
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.AdminID,
			&i.Description,
			&i.Slug,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const isMember = `-- name: IsMember :one
SELECT user_id, group_id
FROM users_groups
WHERE user_id = $1 AND group_id = $2
`

type IsMemberParams struct {
	UserID  uuid.UUID
	GroupID uuid.UUID
}

func (q *Queries) IsMember(ctx context.Context, arg IsMemberParams) (UsersGroup, error) {
	row := q.db.QueryRowContext(ctx, isMember, arg.UserID, arg.GroupID)
	var i UsersGroup
	err := row.Scan(&i.UserID, &i.GroupID)
	return i, err
}

const searchGroups = `-- name: SearchGroups :many
SELECT id, name, created_at, updated_at, admin_id, description, slug
FROM groups
WHERE name ILIKE '%' || $1 || '%'
`

func (q *Queries) SearchGroups(ctx context.Context, dollar_1 sql.NullString) ([]Group, error) {
	rows, err := q.db.QueryContext(ctx, searchGroups, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Group
	for rows.Next() {
		var i Group
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.AdminID,
			&i.Description,
			&i.Slug,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
