// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const checkSlugUser = `-- name: CheckSlugUser :one
SELECT COUNT(slug) AS slug_count
FROM users
WHERE slug = $1
`

func (q *Queries) CheckSlugUser(ctx context.Context, slug string) (int64, error) {
	row := q.db.QueryRowContext(ctx, checkSlugUser, slug)
	var slug_count int64
	err := row.Scan(&slug_count)
	return slug_count, err
}

const checkUsers = `-- name: CheckUsers :one
SELECT COUNT(id) AS entries
FROM users
`

func (q *Queries) CheckUsers(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, checkUsers)
	var entries int64
	err := row.Scan(&entries)
	return entries, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, first_name, last_name, dob, bio, created_at, updated_at, email, slug, hashed_password)
VALUES (
    gen_random_uuid(),
    $1,
    $2,
    $3,
    $4,
    NOW(),
    NOW(),
    $5,
    $6,
    $7
)
RETURNING id, first_name, last_name, dob, bio, created_at, updated_at, email, slug, profile_pic_url, hashed_password
`

type CreateUserParams struct {
	FirstName      string
	LastName       sql.NullString
	Dob            sql.NullTime
	Bio            sql.NullString
	Email          string
	Slug           string
	HashedPassword string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.FirstName,
		arg.LastName,
		arg.Dob,
		arg.Bio,
		arg.Email,
		arg.Slug,
		arg.HashedPassword,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Dob,
		&i.Bio,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.Slug,
		&i.ProfilePicUrl,
		&i.HashedPassword,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, first_name, last_name, dob, bio, created_at, updated_at, email, slug, profile_pic_url, hashed_password
FROM users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Dob,
		&i.Bio,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.Slug,
		&i.ProfilePicUrl,
		&i.HashedPassword,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, first_name, last_name, dob, bio, created_at, updated_at, email, slug, profile_pic_url, hashed_password
FROM users
WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Dob,
		&i.Bio,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.Slug,
		&i.ProfilePicUrl,
		&i.HashedPassword,
	)
	return i, err
}

const getUserBySlug = `-- name: GetUserBySlug :one
SELECT id, first_name, last_name, dob, bio, created_at, updated_at, email, slug, profile_pic_url, hashed_password
FROM users
WHERE slug = $1
`

func (q *Queries) GetUserBySlug(ctx context.Context, slug string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserBySlug, slug)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Dob,
		&i.Bio,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.Slug,
		&i.ProfilePicUrl,
		&i.HashedPassword,
	)
	return i, err
}

const reset = `-- name: Reset :exec
DELETE FROM users
`

func (q *Queries) Reset(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, reset)
	return err
}

const searchUsers = `-- name: SearchUsers :many
SELECT id, first_name, last_name, dob, bio, created_at, updated_at, email, slug, profile_pic_url, hashed_password
FROM users
WHERE first_name ILIKE '%' || $1 || '%'
OR last_name ILIKE '%' || $1 || '%'
OR email ILIKE '%' || $1 || '%'
`

func (q *Queries) SearchUsers(ctx context.Context, dollar_1 sql.NullString) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, searchUsers, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Dob,
			&i.Bio,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Email,
			&i.Slug,
			&i.ProfilePicUrl,
			&i.HashedPassword,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePassword = `-- name: UpdatePassword :exec
UPDATE users
SET hashed_password = $2, updated_at = NOW()
WHERE id = $1
`

type UpdatePasswordParams struct {
	ID             uuid.UUID
	HashedPassword string
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) error {
	_, err := q.db.ExecContext(ctx, updatePassword, arg.ID, arg.HashedPassword)
	return err
}

const updateProfilePic = `-- name: UpdateProfilePic :exec
UPDATE users
SET profile_pic_url = $2, updated_at = NOW()
WHERE id = $1
`

type UpdateProfilePicParams struct {
	ID            uuid.UUID
	ProfilePicUrl sql.NullString
}

func (q *Queries) UpdateProfilePic(ctx context.Context, arg UpdateProfilePicParams) error {
	_, err := q.db.ExecContext(ctx, updateProfilePic, arg.ID, arg.ProfilePicUrl)
	return err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET first_name = $2, last_name = $3, email = $4,
bio = $5, updated_at = NOW()
WHERE id = $1
RETURNING id, first_name, last_name, dob, bio, created_at, updated_at, email, slug, profile_pic_url, hashed_password
`

type UpdateUserParams struct {
	ID        uuid.UUID
	FirstName string
	LastName  sql.NullString
	Email     string
	Bio       sql.NullString
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Bio,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Dob,
		&i.Bio,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.Slug,
		&i.ProfilePicUrl,
		&i.HashedPassword,
	)
	return i, err
}
