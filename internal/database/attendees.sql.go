// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: attendees.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const addGoing = `-- name: AddGoing :exec
INSERT INTO users_events (user_id, event_id)
VALUES (
    $1,
    $2
)
`

type AddGoingParams struct {
	UserID  uuid.UUID
	EventID uuid.UUID
}

func (q *Queries) AddGoing(ctx context.Context, arg AddGoingParams) error {
	_, err := q.db.ExecContext(ctx, addGoing, arg.UserID, arg.EventID)
	return err
}

const isAttending = `-- name: IsAttending :one
SELECT user_id, event_id
FROM users_events
WHERE user_id = $1 AND event_id = $2
`

type IsAttendingParams struct {
	UserID  uuid.UUID
	EventID uuid.UUID
}

func (q *Queries) IsAttending(ctx context.Context, arg IsAttendingParams) (UsersEvent, error) {
	row := q.db.QueryRowContext(ctx, isAttending, arg.UserID, arg.EventID)
	var i UsersEvent
	err := row.Scan(&i.UserID, &i.EventID)
	return i, err
}

const removeGoing = `-- name: RemoveGoing :exec
DELETE FROM users_events
WHERE user_id = $1 AND event_id = $2
`

type RemoveGoingParams struct {
	UserID  uuid.UUID
	EventID uuid.UUID
}

func (q *Queries) RemoveGoing(ctx context.Context, arg RemoveGoingParams) error {
	_, err := q.db.ExecContext(ctx, removeGoing, arg.UserID, arg.EventID)
	return err
}
