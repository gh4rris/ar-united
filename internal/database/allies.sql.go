// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: allies.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const addAlly = `-- name: AddAlly :exec
INSERT INTO allies (requester_id, requestee_id, requested)
VALUES (
    requester_id = $1,
    requestee_id = $2,
    requested = NOW()
)
`

type AddAllyParams struct {
	RequesterID uuid.UUID
	RequesteeID uuid.UUID
}

func (q *Queries) AddAlly(ctx context.Context, arg AddAllyParams) error {
	_, err := q.db.ExecContext(ctx, addAlly, arg.RequesterID, arg.RequesteeID)
	return err
}

const confirmAlly = `-- name: ConfirmAlly :exec
UPDATE allies
SET confirmed = NOW()
WHERE requester_id = $2 AND requestee_id = $1
`

type ConfirmAllyParams struct {
	RequesteeID uuid.UUID
	RequesterID uuid.UUID
}

func (q *Queries) ConfirmAlly(ctx context.Context, arg ConfirmAllyParams) error {
	_, err := q.db.ExecContext(ctx, confirmAlly, arg.RequesteeID, arg.RequesterID)
	return err
}

const getAllyRequests = `-- name: GetAllyRequests :many
SELECT u.id, u.first_name, u.last_name, u.dob, u.created_at, u.updated_at, u.email, u.hased_password
FROM users AS u
INNER JOIN allies AS a
ON u.id = a.requester_id
AND a.requestee_id = $1
WHERE confirmed IS NULL
ORDER BY requested DESC
`

func (q *Queries) GetAllyRequests(ctx context.Context, requesteeID uuid.UUID) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getAllyRequests, requesteeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Dob,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Email,
			&i.HasedPassword,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserAllies = `-- name: GetUserAllies :many
SELECT u.id, u.first_name, u.last_name, u.dob, u.created_at, u.updated_at, u.email, u.hased_password
FROM users AS u
INNER JOIN allies AS a
ON (u.id = a.requester_id AND a.requestee_id = $1)
OR (u.id = a.requestee_id AND a.requester_id = $1)
WHERE confirmed IS NOT NULL
ORDER BY u.first_name ASC
`

func (q *Queries) GetUserAllies(ctx context.Context, requesteeID uuid.UUID) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUserAllies, requesteeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Dob,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Email,
			&i.HasedPassword,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
